scalar PosixTime

type Query {
    artist(id: Int!): ArtistResult

    artistFromName(name: String!): ArtistResult

    collection(id: Int!): CollectionResult

    collectionFromNameAndType(
        name: String!
        type: CollectionType!
    ): CollectionResult

    release(id: Int!): ReleaseResult

    track(id: Int!): TrackResult

    "Fetch the currently authenticated user."
    user: UserResult

    "Fetch all artists."
    artists: ArtistsResult

    "Fetch all collections (of a type)."
    collections(
        "If provided, only collections of this type will be returned."
        type: CollectionType
    ): CollectionsResult

    "Search for releases matching a certain criteria."
    releases(
        """
        A search string. We split this up into individual punctuation-less
        words and return releases that contain each word.
        """
        search: String
        """
        A list of collection IDs. We match releases by the collections in this
        list. For a release to match, it must be in all collections in this
        list.
        """
        collections: [Int]
        """
        A list of artist IDs. We match releases by the artists in this list.
        For a release to match, all artists in this list must be included.
        """
        artists: [Int]
        """
        A list of release types. Filter out releases that do not match one of
        the release types in this list.
        """
        releaseTypes: [ReleaseType]
        """
        Which page of releases to return.
        """
        page: Int
        """
        The number of releases per-page. Leave null to return all releases
        (this will ignore `page`).
        """
        perPage: Int
        """
        How to sort the matching releases.
        """
        sort: ReleaseSort
        """
        If true, sort in ascending order. If false, descending.
        """
        asc: Boolean
    ): ReleasesResult
}

type Mutation {
    createArtist(
        name: String!
        favorite: Boolean
    ): ArtistResult

    updateArtist(
        id: Int!
        name: String
        favorite: Boolean
    ): ArtistResult

    createCollection(
        name: String!
        type: CollectionType!
        favorite: Boolean
    ): CollectionResult

    updateCollection(
        id: Int!
        name: String
        favorite: Boolean
    ): CollectionResult

    addReleaseToCollection(
        collectionId: Int!
        releaseId: Int!
    ): CollectionResult

    delReleaseFromCollection(
        collectionId: Int!
        releaseId: Int!
    ): CollectionResult

    createRelease(
        title: String!
        "A list of artist IDs--the album artists on the release."
        artists: [Int]!
        releaseType: ReleaseType!
        releaseYear: Int!
        "A date in YYYY-MM-DD format."
        releaseDate: String
    ): ReleaseResult

    updateRelease(
        id: Int!
        title: String
        releaseType: ReleaseType,
        releaseYear: Int!
        "A date in YYYY-MM-DD format."
        releaseDate: String
    ): ReleaseResult

    addArtistToRelease(
        releaseId: Int!
        artistId: Int!
    ): ReleaseResult

    delArtistFromRelease(
        releaseId: Int!
        artistId: Int!
    ): ReleaseResult

    updateTrack(
        id: Int!
        title: String
        releaseId: Int
        trackNumber: String
        discNumber: String
    ): TrackResult

    addArtistToTrack(
        trackId: Int!
        artistId: Int!
        role: ArtistRole!
    ): TrackResult

    delArtistFromRole(
        trackId: Int!
        artistId: Int!
        role: ArtistRole!
    ): TrackResult

    """
    Generate a new authentication token for the current user. Invalidate the
    old one.
    """
    newToken: UserResult

}

"The Error type potentially returned from a query."
type Error {
    "The type of the error."
    error: ErrorType!
    message: String!
}

type Artist {
    id: Int!
    name: String!
    favorite: Boolean!
    numReleases: Int!

    releases: [Release]
    "The top genres of the artist, compiled from their releases."
    topGenres: [TopGenre]
}

"The return type of a query for a single artist."
union ArtistResult = Artist | Error

type Artists {
    results: [Artist]!
}

"The return type of a query for multiple artists."
union ArtistsResult = Artists | Error

type Collection {
    id: Int!
    name: String!
    favorite: Boolean!
    type: CollectionType!
    numReleases: Int
    "The last datetime a release was added to the collection."
    lastUpdatedOn: PosixTime

    releases: [Release]
    "The top genres of the collection, compiled from its releases."
    topGenres: [TopGenre]
}

"The return type of a query for a single collection."
union CollectionResult = Collection | Error

type Collections {
    results: [Collection]!
}

"The return type of a query for multiple collections."
union CollectionsResult = Collections | Error

type Release {
    id: Int!
    title: String!
    releaseType: ReleaseType!
    addedOn: PosixTime!
    inInbox: Boolean!
    releaseYear: Int!
    "The date that the release was released in YYYY-MM-DD format (Optional)."
    releaseDate: String
    numTracks: Int!
    "Whether this release has a cover image."
    hasCover: Boolean!

    artists: [Artist]
    tracks: [Track]
    genres: [Collection]
    labels: [Collection]
    collages: [Collection]
}

"The return type of a query for a single release."
union ReleaseResult = Release | Error

type Releases {
    "The total number of releases matching the query across all pages."
    total: Int!
    "The releases on the current page."
    results: [Release]!
}

"The return type of a query for multiple releases."
union ReleasesResult = Releases | Error

type Track {
    id: Int!
    title: String!
    duration: Int!
    trackNumber: String!
    discNumber: String

    release: Release
    artists: [TrackArtist]
}

"The return type of a query for a single track."
union TrackResult = Track | Error

type TrackArtist {
    artist: Artist!
    "The role that the artist has on the track."
    role: ArtistRole!
}

"A type that represents the top genres of an artist/collection."
type TopGenre {
    genre: Collection!
    "The number of releases in the artist/collection that match this genre."
    numMatches: Int!
}

type User {
    id: Int!
    username: String!
}

"The return type of a query for a single user."
union UserResult = User | Error

enum ErrorType {
    NOT_AUTHENTICATED
    NOT_FOUND
}

enum ArtistRole {
    MAIN
    FEATURE
    REMIXER
    PRODUCER
    COMPOSER
    CONDUCTOR
    DJMIXER
}

enum ReleaseType {
    ALBUM
    SINGLE
    EP
    COMPILATION
    SOUNDTRACK
    SPOKENWORD
    LIVE
    REMIX
    DJMIX
    MIXTAPE
    OTHER
    UNKNOWN
}

enum CollectionType {
    SYSTEM
    COLLAGE
    LABEL
    GENRE
    RATING
}

enum ReleaseSort {
    RECENTLY_ADDED
    TITLE
    YEAR
    RANDOM
}
