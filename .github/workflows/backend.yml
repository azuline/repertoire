name: Backend

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: 'backend/'
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.9.1'
      - uses: abatilo/actions-poetry@v2.1.0
      - name: Cache dependencies.
        id: cache-deps
        uses: actions/cache@v2
        with:
          path: ~/.cache/pypoetry/virtualenvs
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies.
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: poetry install
      - name: Run tests.
        run: poetry run pytest --cov-report=xml --cov=. --cov-branch tests/
      - name: Upload coverage.
        run: bash <(curl -s https://codecov.io/bash) -cF python

  type_check:
    name: Type check
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: 'backend/'
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.9.1'
      - uses: abatilo/actions-poetry@v2.1.0
        with:
          poetry-version: 1.1.4
      - name: Cache dependencies.
        id: cache-deps
        uses: actions/cache@v2
        with:
          path: ~/.cache/pypoetry/virtualenvs
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies.
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: poetry install
      - name: Run type check.
        run: make typecheck

  lint_check:
    name: Lint check
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: 'backend/'
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.9.1'
      - uses: abatilo/actions-poetry@v2.1.0
        with:
          poetry-version: 1.1.4
      - name: Cache dependencies.
        id: cache-deps
        uses: actions/cache@v2
        with:
          path: ~/.cache/pypoetry/virtualenvs
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies.
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: poetry install
      - name: Run lint check.
        run: make lintcheck

  schema:
    name: Schema
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: 'backend/'
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.9.1'
      - uses: abatilo/actions-poetry@v2.1.0
        with:
          poetry-version: 1.1.4
      - name: Cache dependencies.
        id: cache-deps
        uses: actions/cache@v2
        with:
          path: ~/.cache/pypoetry/virtualenvs
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies.
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: poetry install
      - name: Generate schema.
        run: make schema
      - name: Check for dirty files.
        run: bash -c '[[ -z $(git status -s) ]] || (exit 1)'

  setupfiles:
    name: Setupfiles
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: 'backend/'
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.9.1'
      - uses: abatilo/actions-poetry@v2.1.0
        with:
          poetry-version: 1.1.4
      - name: Cache dependencies.
        id: cache-deps
        uses: actions/cache@v2
        with:
          path: ~/.cache/pypoetry/virtualenvs
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies.
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: poetry install
      - name: Generate setupfiles.
        run: make setupfiles
      - name: Check for dirty files.
        run: bash -c '[[ -z $(git status -s) ]] || (exit 1)'
