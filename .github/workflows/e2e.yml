name: E2E

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    env:
      CI: true
      DATA_PATH: ../_data
      LD_LIBRARY_PATH: /usr/local/lib
    steps:
      # SQLite3 installation.
      - uses: actions/checkout@v2
      - name: Cache SQLite
        id: cache-sqlite
        uses: actions/cache@v2
        with:
          path: /tmp/sqlite
          key: ${{ runner.os }}-sqlite-2021-03-02
      - name: Build SQLite
        if: steps.cache-sqlite.outputs.cache-hit != 'true'
        uses: ./.github/actions/build-sqlite
      - name: Install SQLite
        uses: ./.github/actions/install-sqlite
      - uses: actions/setup-python@v2
        with:
          python-version: "3.9.5"
      # Poetry installation.
      - name: Cache poetry
        id: cache-poetry
        uses: actions/cache@v2
        with:
          path: ~/.poetry
          key: ${{ runner.os }}-therealpoetry-1.1.4
      - name: Install poetry
        if: steps.cache-poetry.outputs.cache-hit != 'true'
        run: curl -sSl -vvv https://raw.githubusercontent.com/python-poetry/poetry/1.1.4/get-poetry.py | python -
      - name: Configure environment
        run: echo "$HOME/.poetry/bin" >> $GITHUB_PATH

      # Test library.
      - name: Cache test library
        id: cache-library
        uses: actions/cache@v2
        with:
          path: _testlib/
          key: ${{ runner.os }}-test-library-2021-03-05
      - name: Download test library
        if: steps.cache-library.outputs.cache-hit != 'true'
        run: wget -O - https://u.sunsetglow.net/f/5moSen8BU_c.tgz | tar -xzvf -

      # Build frontend.
      - name: Cache frontend dependencies
        id: cache-frontend-deps
        uses: actions/cache@v2
        with:
          path: frontend/node_modules/
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/frontend/yarn.lock') }}
          restore-keys: ${{ runner.os }}-yarn-
      - name: Install frontend dependencies
        if: steps.cache-frontend-deps.outputs.cache-hit != 'true'
        run: yarn install
        working-directory: frontend/
      - name: Build static frontend
        run: yarn build
        working-directory: frontend/

      # Run backend.
      - name: Cache backend dependencies
        id: cache-backend-deps
        uses: actions/cache@v2
        with:
          path: ~/.cache/pypoetry/virtualenvs
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/backend/poetry.lock') }}
          restore-keys: "${{ runner.os }}-poetry-"
      - name: Install backend dependencies
        if: steps.cache-backend-deps.outputs.cache-hit != 'true'
        run: poetry install
        working-directory: backend/
      - name: Spin up backend server
        run: |
          mkdir -p _data/ e2e/output/logs/
          printf '[repertoire]\nmusic_directories = ["../_testlib"]\nindex_crontab = 0 0 * * *' > _data/config.ini
          cd backend/
          make start > ../e2e/output/logs/backend.log 2>&1 &

      # Run E2E tests.
      - name: Cache e2e tests dependencies
        id: cache-test-deps
        uses: actions/cache@v2
        with:
          path: |
            e2e/node_modules/
            ~/.cache/Cypress/
          key: ${{ runner.os }}-yarn-e2e-${{ hashFiles('**/e2e/yarn.lock') }}
          restore-keys: ${{ runner.os }}-yarn-e2e-
      - name: Install e2e tests dependencies
        if: steps.cache-test-deps.outputs.cache-hit != 'true'
        run: yarn install
        working-directory: e2e/
      - name: Run e2e tests
        run: |
          yarn wait-port -t 30000 5000
          yarn test
        working-directory: e2e/

      # Post-run.
      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: cypress-output
          path: |
            e2e/cypress/videos/
            e2e/cypress/screenshots/
            e2e/output/
  lint_check:
    name: Lint check
    runs-on: ubuntu-latest
    env:
      CI: true
    defaults:
      run:
        working-directory: "e2e/"
    steps:
      - uses: actions/checkout@v2
      - name: Cache dependencies
        id: cache-deps
        uses: actions/cache@v2
        with:
          path: e2e/node_modules
          key: ${{ runner.os }}-yarn-e2e-${{ hashFiles('**/yarn.lock') }}
          restore-keys: ${{ runner.os }}-yarn-e2e-
      - name: Install dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: yarn install
      - name: Run lint check
        run: yarn eslint cypress/ --ext .ts --max-warnings=0
