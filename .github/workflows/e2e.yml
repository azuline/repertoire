name: E2E

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    env:
      CI: true
      DATA_PATH: ../_data
      LD_LIBRARY_PATH: /usr/local/lib
      PLAYWRIGHT_BROWSERS_PATH: 0
    steps:
      - uses: actions/checkout@v2
      - name: Cache SQLite
        id: cache-sqlite
        uses: actions/cache@v2
        with:
          path: /tmp/sqlite
          key: ${{ runner.os }}-sqlite-2021-03-02
      - name: Build SQLite
        if: steps.cache-sqlite.outputs.cache-hit != 'true'
        uses: ./.github/actions/build-sqlite
      - name: Install SQLite
        uses: ./.github/actions/install-sqlite
      - uses: actions/setup-python@v2
        with:
          python-version: '3.9.1'
      - name: Install Playwright
        uses: microsoft/playwright-github-action@v1
      - name: Cache test library
        id: cache-library
        uses: actions/cache@v2
        with:
          path: _testlib/
          key: ${{ runner.os }}-test-library-2021-03-05
      - name: Download test library
        if: steps.cache-library.outputs.cache-hit != 'true'
        run: wget -O - https://u.sunsetglow.net/f/5moSen8BU_c.tgz | tar -xzvf -
      - name: Cache poetry
        id: cache-poetry
        uses: actions/cache@v2
        with:
          path: ~/.poetry
          key: ${{ runner.os }}-therealpoetry-1.1.4
      - name: Install poetry
        if: steps.cache-poetry.outputs.cache-hit != 'true'
        run: curl -sSl -vvv https://raw.githubusercontent.com/python-poetry/poetry/1.1.4/get-poetry.py | python -
      - name: Configure environment
        run: echo "$HOME/.poetry/bin" >> $GITHUB_PATH
      - name: Cache backend dependencies
        id: cache-backend-deps
        uses: actions/cache@v2
        with:
          path: ~/.cache/pypoetry/virtualenvs
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/backend/poetry.lock') }}
          restore-keys: "${{ runner.os }}-poetry-"
      - name: Install backend dependencies
        if: steps.cache-backend-deps.outputs.cache-hit != 'true'
        run: poetry install
        working-directory: backend/
      - name: Spin up backend server
        run: |
          mkdir _data/ output/
          printf '[repertoire]\nmusic_directories = ["../_testlib"]\nindex_crontab = 0 0 * * *' > _data/config.ini
          cd backend/
          make debug > ../output/backend.log 2>&1 &
      - name: Cache frontend dependencies
        id: cache-frontend-deps
        uses: actions/cache@v2
        with:
          path: frontend/node_modules/
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/frontend/yarn.lock') }}
          restore-keys: "${{ runner.os }}-yarn-"
      - name: Install frontend dependencies
        if: steps.cache-frontend-deps.outputs.cache-hit != 'true'
        run: yarn install
        working-directory: frontend/
      - name: Spin up frontend server
        run: |
          cd frontend/
          yarn wait-port -t 30000 5000
          # Get the backend indexer going... saves us time later.
          curl -X POST http://localhost:5000/api/dev/indexlib &
          yarn start > ../output/frontend.log 2>&1 &
      - name: Cache testing dependencies
        id: cache-test-deps
        uses: actions/cache@v2
        with:
          path: tests/node_modules/
          key: ${{ runner.os }}-yarn-playwright-${{ hashFiles('**/tests/yarn.lock') }}
          restore-keys: "${{ runner.os }}-yarn-playwright-"
      - name: Install testing dependencies
        if: steps.cache-test-deps.outputs.cache-hit != 'true'
        run: yarn install
        working-directory: tests/
      - name: Run e2e tests
        run: |
          cd tests/
          yarn wait-port -t 30000 3000
          yarn test
      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: e2e-output
          path: output/
